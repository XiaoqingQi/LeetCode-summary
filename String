==============================================================================================================================
1.One Away
Given two strings, write a function to check if they are one edit(or zero edit) away.
There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character
-------------------------------------------------------------------------------------------------------------------------------
Solution 1(brute force)
We could check all possible strings that are one edit away by testing the removal of each character, testing the replacement of
each character, testing the insertion of each possible character.
-------------------------------------------------------------------------------------------------------------------------------
Solution 2
Let's think about the "meaning" of each of these operations:
Replacement: Condider two strings, such as bale and pale, that are one replacement away. It means that they are different only
in one place.
Insertion: The string aple and apple are one insertion away. It means that if you compared the strings, they would be identical,
except for a shift at some point in the strings.
Removal: The string apple and aple are one removla away, since removal is just the inverse of insertion.
public class OneAway {
    boolean oneEditAway(String first, String second){
        if (first.length() == second.length()){
            return oneEdidReplace(first, second);
        } else if (first.length() + 1 == second.length()){
            return oneEditInsert(first, second);
        } else if (first.length() - 1 == second.length()){
            return oneEditInsert(second, first);
        }
        return false;
    }

    private boolean oneEditInsert(String first, String second) {
        int index1 = 0;
        int index2 = 0;
        while (index1 < first.length() && index2 < second.length()){
            if (first.charAt(index1) != second.charAt(index2)){
                if (index1 != index2){
                    return false;
                }
                index2++;
            } else {
                index1++;
                index2++;
            }
        }
        return true;
    }

    private boolean oneEdidReplace(String first, String second) {
        boolean foundDifference = false;
        for (int i = 0; i < first.length(); i++){
            if (first.charAt(i) != second.charAt(i)){
                if (foundDifference){
                    return false;
                }
                foundDifference = true;
            }
        }
        return true;
    }
}
=============================================================================================================================
2.String Compression
Implement a method to perform basic string compression using the counts of repeated characters.
For example, the string aabcccccaaa would become a2b1c5a3.
If the "compressed" string would not become smaller than the original string, your method should 
return the original string.
You can assume the string has only uppercase and lowercase letters.
-----------------------------------------------------------------------------------------------------------------------------
We iterate through the string, and copy characters to a new string and counting the repeats.
At each iteration, check if the current character is the same as the next character.
If not, add its compressed version to the result.
public class StringCompression {
    String compress(String str){
        StringBuilder sb = new StringBuilder();
        int countCompress = 0;
        for (int i = 0; i < str.length(); i++){
            countCompress++;
            if (i + 1 >= str.length() || str.charAt(i) != str.charAt(i+1)){
                sb.append(str.charAt(i));
                sb.append(countCompress);
                countCompress = 0;
            }
        }
        return sb.length() < str.length() ? sb.toString() : str;
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Instead, we can check in advance. This will be more optimal in cases where we don't have a large number of repeating characters.
It will avoid us having to create a string which we never use.
The downside of this is that it causes a second loop through the characters and add nearly duplicated code.
ublic class StringCompression {
    String compress(String str){
        int finalLength = countCompression(str);
        if (finalLength <= str.length()){
            return str;
        }
        StringBuilder sb = new StringBuilder();
        int countCompress = 0;
        for (int i = 0; i < str.length(); i++){
            countCompress++;
            if (i + 1 >= str.length() || str.charAt(i) != str.charAt(i+1)){
                sb.append(str.charAt(i));
                sb.append(countCompress);
                countCompress = 0;
            }
        }
        return sb.length() < str.length() ? sb.toString() : str;
    }
    private int countCompression(String str){
        int finalLength = 0;
        for (int i  = 0; i < str.length(); i++){
            finalLength++;
            if (i + 1 >= str.length() || str.charAt(i) != str.charAt(i+1)){
                finalLength++;
            }
        }
        return finalLength;
    }
}
============================================================================================================================
3.Check Permutation
Give two strings, check if one is a permutation of the other.
Assume that the comparison is case sensitive and whitespace is significant.
----------------------------------------------------------------------------------------------------------------------------
Observe that strings of different length cannot be permutation of each other.
----------------------------------------------------------------------------------------------------------------------------
Solution 1 : 
Sort the stings.
If two strings are permutations, we know that they have the same characters, but in different orders.
Sorting the strings will put the characters from two permutations in the same order.
We just need to compare the sorted version of the strings.

import java.util.Arrays;

public class CheckPermutation {
    boolean permutation(String str1, String str2){
        if (str1.length() != str2.length()){
            return false;
        }
        return sort(str1).equals(sort(str2));
    }
    private String sort(String str){
        char[] c = str.toCharArray();
        Arrays.sort(c);
        return new String(c);
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Solution 2:
Check if the two strings have identical character counts
We create an array that operates like a hash table, mapping each character to its frequency.
We increment throught the first string, then decrement through the second string.
If the strings are permutations, the array will be all zeros at the end.
We can terminate early if a value ever turns negative.(Once negative, the value will stay negative, therefore non-zero).
The array cannot have any positive values if it doesnot have any negative values.

public class CheckPermutation {
    boolean permutation(String str1, String str2){
        //Permutations must be the same length
        if (str1.length() != str2.length()){
            return false;
        }
        int[] letters = new int[128]; //Assumption: ASC11
        for (int i = 0; i < str1.length(); i++){
            letters[str1.charAt(i)]++;
        }
        for (int i = 0; i < str2.length(); i++){
            letters[str2.charAt(i)]--;
            if (letters[str2.charAt(i)] < 0){
                return false;
            }
        }
        return true;
    }
}
=============================================================================================================================
4.URLify
Write a method to replace all spaces in a string with '%20'.
Assume that the string has sufficient space at the end to hold the additional characters.
You are given the 'true' length of the string.
Note: if implementing in Java, please use a character array so that you can perform this operation in place.
EXAMPLE: 
Input : "Mr John Smith   ", 13
Output : "Mr%20John%20Smith"
-----------------------------------------------------------------------------------------------------------------------------
A common approach in string manipulation problems is to edit the string starting from the end and working backwards.
Because we have an extra buffer at the end, which allows us to change characters without worrying about what we are overwritting.
Two-scan approach.
In the first scan, we count the number of the spaces. Then tripling this number, and compute how many characters we will use in
the final string.
In the second pass, which is done in reverse order, we actually edit the string.
When we see a space, we replace it with %20. If there is no space, then we copy the original character.
public class URLify {
    void replaceSpaces(char[] str, int trueLength){
        int spaceCount = 0;
        for (int i = 0; i < str.length; i++){
            if (str[i] == ' '){
                spaceCount++;
            }
        }
        int index = trueLength + spaceCount * 2;
        for (int i = trueLength - 1; i >= 0; i--){
            if (str[i] == ' '){
                str[index - 1] = '0';
                str[index - 2] = '2';
                str[index - 3] = '%';
                index = index - 3;
            } else {
                str[index - 1] = str[i];
                index--;
            }
        }
    }
}
===========================================================================================================================
5. String Rotation
 Assume you have a method isSubstring which checks if one word is substring of another.
 Give two strings, s1 and s2, write a method to check if s2 is a rotation of s1 using only on call to isSubstring.
 EXAMPLE:
 "waterbottle" is a rotation of "erbottlewat"
 -------------------------------------------------------------------------------------------------------------------------
 In a rotation, we cut s1 into two parts, x and y, and rearrage them to get s2.
 s1 = xy = waterbottle
 x = wat
 y = erbottle
 s2 = yx;
 We can see that yx will always be substring of xyxy.
 Therefore s2 will always substring of s1s1.
 boolean isRotation(String s1, String s2){
    int len = s1.length();
    //Check that s1 and s2 are equal length and not empty
    if (len = s2.lenght() && len > 0){
        //Concatenate s1 and s1 with new buffer
        String s1s1 = s1 + s1;
        return isSubsting(s1s1, s2);
    }
    return false;
 }
===========================================================================================================================
6.Add Strings

    Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.

    Note:

    The length of both num1 and num2 is < 5100.
    Both num1 and num2 contains only digits 0-9.
    Both num1 and num2 does not contain any leading zero.
    You must not use any built-in BigInteger library or convert the inputs to integer directly.

    class Solution {
    public String addStrings(String num1, String num2) {
        if (num1 == null){
            return num2;
        }
        if (num2 == null){
            return num1;
        }
        int carry = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = num1.length()-1, j = num2.length()-1; i >=0 || j >= 0 || carry == 1; i--, j--){
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            sb.append((x + y + carry) % 10);
            carry = (x + y + carry) / 10;
        }
        sb.reverse();
        return sb.toString();
    }
    
}
