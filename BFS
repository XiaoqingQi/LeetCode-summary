1.Traversal in Graph
  1.1 Level Order Traversal
      Question:
      Binary Tree Level Order Traversal  
      /*
      Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
      
      Example
      Given binary tree {3,9,20,#,#,15,7}
        3
       / \
      9  20
        /  \
       15   7
       
       return its level order traversal as:
       [
          [3],
          [9,20],
          [15,7]
        ]
       */
       
       Solution:
       /*
       Use Queue to store nodes of the tree
       Traversal from the root of the tree 
       First put root into queue
       Use a variable(size) to record the current size of queue
       Then loop through every node in current queue, and put every node's left child and right child into queue
       Then loop again until there is no more node in the queue
       */
       
      /**
       * Definition of TreeNode:
       * public class TreeNode {
       *     public int val;
       *     public TreeNode left, right;
       *     public TreeNode(int val) {
       *         this.val = val;
       *         this.left = this.right = null;
       *     }
       * }
       */

      public class Solution {
          /**
           * @param root: A Tree
           * @return: Level order a list of lists of integer
           */
          public List<List<Integer>> levelOrder(TreeNode root) {
              List<List<Integer>> result = new ArrayList<>();
              if (root == null){
              return result;
              }
              Queue<TreeNode> queue = new LinkedList<>();
              queue.offer(root);
              //Each loop, traversal one level
              //Until no node in queue
              while (!queue.isEmpty()){
                //Use a list(level) to store every element in each level
                ArrayList<Integer> level = new ArrayLsit<>();
                //Use a variable to record current size of queue because the size of queue is changing dynamicly
                int size = queue.size();
                //loop through the nodes in current queue
                for (int i = 0; i < size; i++){
                //put all the children of current nodes into the queue
                  TreeNode node = queue.poll();
                  if (node.left != null){
                    queue.offer(node.left);
                  }
                  if (node.right != null){
                    queue.offer(node.right);
                  }
                }
                result.add(level);
              }
              return result;
      }
  1.2 Connected Componet
    Question:
    Number of Islands 
    /*
    Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent,
    we consider them in the same island. We only consider up/down/left/right adjacent.
    Find the number of islands.
    
     Example

      Given graph:

      [
        [1, 1, 0, 0, 0],
        [0, 1, 0, 0, 1],
        [0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1]
      ]

      return 3.
    */
    Solution:
    /*
    New a class(Coordinate) to represent a grid
    Create a variable(num) to record the number of islands
    Loop through the matrix, check if the grid in the matrix is marked as 1 which means it is an island
    Then put the grid which is marked as an island into a queue, and let the num plus 1
    Then loop through the queue untill there is no gird in the queue
    Pull each grid out of the queue, and marked the gird as 2(means that the grid is already traversed), then check its
    adjacent grids to see if it is makrked as 1, if so put them into the queue
    */
    public class Coordinate{
      int x;
      int y;
      public Coordinate(int x, int y){
        this.x = x;
        this.y = y;
      }
    }
    public class Solution {
      /**
       * @param grid: a int 2D matrix
       * @return: an integer
       */
       
      int[] coordinateX = {-1, 0, 1, 0};
      int[] coordinateY = {0, -1, 0, 1};
      public int numIslands(int[][] matrix) {
          if (matrix == null){
            return 0;
          }
          if (matrix.length == 0 || matrix[0].length == 0){
            return 0;
          }
          int num = 0;
          for (int i = 0; i < matrix.length; i++){
            for (int j = 0; j < matrix[0].length; j++){
              if (matrix[i][j] == 1){
                num++;
                Coordinate grid = new Coordinate(i, j);
                bfs(matrix, grid);
              }
            }
          }
          return num;
      }
      private void bfs(int[][] matrix, Coordinate grid){
        Queue<Coordinate> queue = new LinkedList<>();
        queue.offer(grid);
        while (!queue.isEmpty()){
          Coordinate grid = queue.poll();
          int x = grid.x;
          int y = grid.y;
          matrix[x][y] = 2;
          for (int i = 0; i < 4; i++){
            int a = x + coordinateX[i];
            int b = y + coordinateY[i];
            if (inBound(matrix, a, b) && matrix[a][b] == 1){
              queue.offer(new Coordinate(a, b));
            }
          }
        }
      }
      private boolean inBound(int[][] matrix, int x, int y){
        int row = matrix.length;
        int col = matrix[0].length;
        return if (x >= 0 && x < row && y >= 0 && y < col)
      }
    }
    
  1.3 Topological Sorting
    Question:
    Course Schedule II
    /*
      There are a total of n courses you have to take, labeled from 0 to n - 1.
      Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed
      as a pair: [0,1]

      Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to
      finish all courses.

      There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses,
      return an empty array.
      
       Example

        Given n = 2, prerequisites = [[1,0]]
        Return [0,1]

        Given n = 4, prerequisites = [1,0],[2,0],[3,1],[3,2]]
        Return [0,1,2,3] or [0,2,1,3]
    */
    Solution:
    /*
      Use an array to present degree of every vertex
      Use an array to present a graph
      Put vertexes whose degree equals to 0 into a queue
      Then loop through the queue
      Every time we pull a vertex out of the queue, we decrease the degree of its adjacent vertex 1, if there is vertex 
      whose degree equals 0, then we put that vertex into queue
      
    */
    
    public class Solution {
    /**
     * @param numCourses a total of n courses
     * @param prerequisites a list of prerequisite pairs
     * @return the course order
     */
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] degree = new int[numCourses];
        ArrayList<Integer>[] graph = new ArrayList<>[numCourses];
        for (int i = 0; i < numCourses; i++){
          graph[i] = new ArrayList<Integer>();
        }
        for (int j = 0; j < prerequisites.length; j++){
          degree[prerequisites[j][0]]++;
          graph[prerequisites[j][1]].add(prerequisites[j][0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int k = 0; k < degree.length; k++){
          if (degree[k] == 0){
            queue.offer(k);
          }
        }
        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()){
          int vertex = queue.poll();
          result[index++] = vertex;
          int size = graph[vertex].size();
          for (int i = 0; i < size; i++){
            degree[graph[vertex].get(i)]--;
            if (degree[graph[vertex].get(i)] == 0){
              queue.offer(degree[graph[vertex].get(i)]);
            }
          }
        }
        if (index == numCourses){
          return result;
        }
        return int[0];
    }
    
  2.Shortest path in simple graph
  
  Question:
  Knight Shortest Path
  /*
   
    Given a knight in a chessboard (a binary matrix with 0 as empty and 1 as barrier) with a source position, find the
    shortest path to a destination position, return the length of the route.
    Return -1 if knight can not reached.
    
    Notice
    source and destination must be empty.
    Knight can not enter the barrier.
    
    Clarification

    If the knight is at (x, y), he can get to the following positions in one step:

    (x + 1, y + 2)
    (x + 1, y - 2)
    (x - 1, y + 2)
    (x - 1, y - 2)
    (x + 2, y + 1)
    (x + 2, y - 1)
    (x - 2, y + 1)
    (x - 2, y - 1)

    Example

    [[0,0,0],
     [0,0,0],
     [0,0,0]]
    source = [2, 0] destination = [2, 2] return 2

    [[0,1,0],
     [0,0,0],
     [0,0,0]]
    source = [2, 0] destination = [2, 2] return 6

    [[0,1,0],
     [0,0,1],
     [0,0,0]]
    source = [2, 0] destination = [2, 2] return -1
  */
  
  Solution:
  The idea is to use BFS as it is a shortest path problem.
  Create a queue to store positions that can be reached
  Loop through the queue till it is empty
    Use a variable(size) to record the size of current queue(means all possible nodes from prior node)
    Pop next unvisited node from the queue
    If the popped node is the destination, return the distance
    Else we mark current node as visited and find its 8 possible movements
    We put valid movements into the queue with +1 distance
  
      /**
     * Definition for a point.
     * public class Point {
     *     publoc int x, y;
     *     public Point() { x = 0; y = 0; }
     *     public Point(int a, int b) { x = a; y = b; }
     * }
     */
      public class Solution {
          /**
           * @param grid a chessboard included 0 (false) and 1 (true)
           * @param source, destination a point
           * @return the shortest path 
           */
          //Below arrays details all 8 directions for a knight
          int[] row = {1, 1, -1, -1, 2, 2, -2, -2};
          int[] col = {2, -2, 2, -2, 1, -1, 1, -1};

          public int shortestPath(boolean[][] grid, Point source, Point destination) {
              if (grid == null || grid.length == 0 || grid[0].length == 0){
                  return 0;
              }
              //Create a queue to store all possible position
              Queue<Point> q = new LinkedList<>();
              q.offer(source);
              int path = 0;
              //run till queue is empty
              while (!q.isEmpty()){
                  //Use a variable to record the size of current queue
                  int size = q.size();
                  //Loop through the current queue
                  for (int i = 0; i < size; i++){
                      //Pop front point from queue and process it
                      Point point = q.poll();
                      //If destination is reached, return the distance
                      if (point.x == destination.x && point.y == destination.y){
                          return path;
                      }
                      //Mark current point as visited
                       grid[point.x][point.y] = true;
                      //Check all 8 possible movements
                      //Put all valid movements into a queue
                      for (int k = 0; k < 8; k++){
                          Point nextpoint = new Point(point.x + deltaX[k],
                                                     point.y + deltaY[k]);
                          if (!inBound(nextpoint, grid)){
                              continue;
                          }
                          //Mark point which is put into the queue as visited
                          q.offer(nextpoint);
                      }
                  }
                  path++;
              }
              return -1;
          }
          //check if a point is a valid chess board coordinate
          //Note that a knight cannot go out of the chessboard
          private boolean inBound(Point point, boolean[][]grid){
              int n = grid.length;
              int m = grid[0].length;
              if (point.x < 0 || point.x >= n){
                  return false;
              }
              if (point.y < 0 || point.y >= m){
                  return false;
              }
              return grid[point.x][point.y] == false;
          }
      }
