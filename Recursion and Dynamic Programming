==============================================================================================================================
1. Triple Step
  A child is running up a staircase with n steps and can hop either 1 step or 2 steps or 3 steps at a time.
  Implement a method to count how many possible ways the child can run up the stairs.
-----------------------------------------------------------------------------------------------------------------------------
Solution 1 :
  Let's think about one qustion: what is the very last step that is done?
  The very last step the child makes( the one that lands her on the nth step) was either a 3-step hop, a 2-step hop or 1-step hop.
  When we thought about all of the pahts to the nth step, we could just build them off the paths to the three previous steps.
  We can get up to the nth step by any of the following:
    Going to the (n-1)st step and hopping 1 step.
    Going to the (n-2)nd step and hopping 2 steps.
    Going to the (n-3)rd step and hopping 3 steps.
  Therefore we just need to add the number of these paths together.
  It will take 3^n time.
  
    int countWays(int n){
      if (n < 0){
        return 0;
      } else if (n == 0){
        return 1;
      } else {
        return countWays(n-1) + countWays(n-2) + countWays(n-3);
    }
-----------------------------------------------------------------------------------------------------------------------------
Solution 2:
  In the previous solution, countWays is called many times for the same values.
  We can fix this through memorization.
  If we have seen this value of n before, return the cached value. Each time we compute a fresh value, add it to the cache.
  We use a HashMap<Integer, Integer> for a cache. In this case, the keys will be exactly 1 through n.
  It's more compact to use an integer array.
  
   int countWays(int n){
    int[] memo = new int[n+1];
    Arrays.fill(memo,-1);
    countWays(n, memo);
   } 
   int countWays(int n, int[] memo){
    if (n < 0){
      return 0;
    } else if (n == 0){
      return 1;
    } else if (memo[n] > -1){
      return memo[n];
    } else {
      memo[n] = countWays{n-1, memo) + countWays(n-2, memo) + countWays(n-3, memo);
      return memo[n];
    }
   }
