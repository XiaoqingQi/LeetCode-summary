==============================================================================================================================
1. Triple Step
  A child is running up a staircase with n steps and can hop either 1 step or 2 steps or 3 steps at a time.
  Implement a method to count how many possible ways the child can run up the stairs.
-----------------------------------------------------------------------------------------------------------------------------
Solution 1 :
  Let's think about one qustion: what is the very last step that is done?
  The very last step the child makes( the one that lands her on the nth step) was either a 3-step hop, a 2-step hop or 1-step hop.
  When we thought about all of the pahts to the nth step, we could just build them off the paths to the three previous steps.
  We can get up to the nth step by any of the following:
    Going to the (n-1)st step and hopping 1 step.
    Going to the (n-2)nd step and hopping 2 steps.
    Going to the (n-3)rd step and hopping 3 steps.
  Therefore we just need to add the number of these paths together.
  It will take 3^n time.
  
    int countWays(int n){
      if (n < 0){
        return 0;
      } else if (n == 0){
        return 1;
      } else {
        return countWays(n-1) + countWays(n-2) + countWays(n-3);
    }
-----------------------------------------------------------------------------------------------------------------------------
Solution 2:
  In the previous solution, countWays is called many times for the same values.
  We can fix this through memorization.
  If we have seen this value of n before, return the cached value. Each time we compute a fresh value, add it to the cache.
  We use a HashMap<Integer, Integer> for a cache. In this case, the keys will be exactly 1 through n.
  It's more compact to use an integer array.
  
   int countWays(int n){
    int[] memo = new int[n+1];
    Arrays.fill(memo,-1);
    countWays(n, memo);
   } 
   int countWays(int n, int[] memo){
    if (n < 0){
      return 0;
    } else if (n == 0){
      return 1;
    } else if (memo[n] > -1){
      return memo[n];
    } else {
      memo[n] = countWays{n-1, memo) + countWays(n-2, memo) + countWays(n-3, memo);
      return memo[n];
    }
   }
==============================================================================================================================
2. Robot in a Grid
  Imagine a robot sitting on the upper left corner of grid with r rows and c colums.
  The robot can only move in two directions, right and down, but certain cells are "off limits" such that the robot cannot step
  on them.
  Design a algorithm to find a path for the robot from the top left to right bottom.
-----------------------------------------------------------------------------------------------------------------------------
Solution:
  We know the only way to move to spot(r,c) is by moving to one of the adjacent spots:
  (r-1, c) or (r, c-1).
  So we need to find a path to either (r-1, c) or (r, c-1);
  To do so, we need to find a path to its adjacent spots.
  So we just work backwards, starting from the last cell, we try to find a path to each of its adjacent cells.
  It will take O(2^r+c), since each path has r+c steps, and there are two choices we can make at each step.
  
  class Point{
    int row;
    int col;
    public Point(int r, int c){
      row = r;
      col = c;
    }
    class Solution{
      ArrayList<Point> getPath(boolean[] maze){
        if (maze == null || maze.length == 0) return null;
        ArrayList<Point> path = new ArrayList<Point>();
        
        if (getPaht(maze, maze.length()-1, maze[0].length-1, path)){
          return path;
        }
        return null;
      }
    }
    boolean getPath(boolean[] maze, int row, int col, ArrayList<Point> path){
      //If out of bounds or not available, return false;
      if (col < 0 || row < 0 || !maze[row][col]){
        return false;
      }
      boolean isAtOrigin = (row == 0) && (col == 0);
      //If there's a path from the start to here, add my location
      if (isAtOrigin || getPath(maze, row-1, col, path) || getPath(maze, row, col-1, path){
        path.add(new Point(row,col));
        return true;
      }
      return false;
    }
  }
-----------------------------------------------------------------------------------------------------------------------------
Optimal solution:
  In the previous solution, we visited squares many times.
  We should remenber cells that we already visited.
  It will take O(rc) tiem, because we hit each cell just once.
   ArrayList<Point> getPath(boolean[] maze){
        if (maze == null || maze.length == 0) return null;
        ArrayList<Point> path = new ArrayList<Point>();
        HashSet<Point> failedPoints = new HashSet<>();
        if (getPaht(maze, maze.length()-1, maze[0].length-1, path, failedPoints)){
          return path;
        }
        return null;
      }
    }
    boolean getPath(boolean[] maze, int row, int col, ArrayList<Point> path, HashSet<Point> failedPoints){
      //If out of bounds or not available, return false;
      if (col < 0 || row < 0 || !maze[row][col]){
        return false;
      }
      boolean isAtOrigin = (row == 0) && (col == 0);
      //If there's a path from the start to here, add my location
      if (isAtOrigin || getPath(maze, row-1, col, path) || getPath(maze, row, col-1, path){
        path.add(new Point(row,col));
        return true;
      }
      failedPoints.add(new Point(row, col));//Cache result
      return false;
    }
  
