You have an array of integers, and for each index you want to find the product of every integer except the integer at that index.

Write a method getProductsOfAllIntsExceptAtIndex() that takes an array of integers and returns an array of the products.

For example, given:

  [1, 7, 3, 4]

your method would return:

  [84, 12, 28, 21]

by calculating:

  [7 * 3 * 4,  1 * 3 * 4,  1 * 7 * 4,  1 * 7 * 3]

Here's the catch: You can't use division in your solution! 

Solution:

 A brute force approach would use two loops to multiply the integer at every index by the integer at every nestedIndex, unless index == nestedIndex.

This would give us a runtime of O(n2).
We can use greedy approach. The product of all the integers except the integer at each index can be broken down into two pieces:
the product of all the integers before each index, and the product of all the integers after each index.
So to get the products of all the integers before each index, we could greedily store each product so far and multiply that by the next integer. 
Then we can store that new product so far and keep going.
And for the products of all the integers after each index, we can loop through the array from the last to the front(backwards).
We create an array, populate it with the products of all the integers before each index, 
and then multiply those products with the products after each index to get our final result! 
summary:  To find the products of all the integers except the integer at each index, we'll go through our array greedily  twice. 
First we get the products of all the integers before each index, and then we go backwards to get the products of all the integers after each index.
When we multiply all the products before and after each index, we get our answerâ€”the products of all the integers except the integer at each index!

public static int[] getProductsOfAllIntsExceptAtIndex(int[] intArray) {

    if (intArray.length < 2) {
        throw new IllegalArgumentException("Getting the product of numbers at other indices requires at least 2 numbers");
    }

    // we make an array with the length of the input array to
    // hold our products
    int[] productsOfAllIntsExceptAtIndex = new int[intArray.length];

    // for each integer, we find the product of all the integers
    // before it, storing the total product so far each time
    int productSoFar = 1;
    for (int i = 0; i < intArray.length; i++) {
        productsOfAllIntsExceptAtIndex[i] = productSoFar;
        productSoFar *= intArray[i];
    }

    // for each integer, we find the product of all the integers
    // after it. since each index in products already has the
    // product of all the integers before it, now we're storing
    // the total product of all other integers
    productSoFar = 1;
    for (int i = intArray.length - 1; i >= 0; i--) {
        productsOfAllIntsExceptAtIndex[i] *= productSoFar;
        productSoFar *= intArray[i];
    }

    return productsOfAllIntsExceptAtIndex;
}
