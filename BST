=====================================================================================================
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
-----------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int count = countNode(root.left);
        if (k <= count){
            return kthSmallest(root.left, k);
        } else if (k > count + 1){
            return kthSmallest(root.right, k-count-1);
        }
        return root.val;
    }
    private int countNode(TreeNode root){
        if (root == null){
            return 0;
        } else {
            return 1 + countNode(root.left) + countNode(root.right);
        }
    }
}
=====================================================================================================
