=============================================================================================================================
1. Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum 
   and return its sum.

    Example:

    Input: [-2,1,-3,4,-1,2,1,-5,4],
    Output: 6
    Explanation: [4,-1,2,1] has the largest sum = 6.
------------------------------------------------------------------------------------------------------------------------------
Solution 1:
  We use a pointer starting from the left end(element A[1]) and scanning through to the right end, keeping track of the maximum the pointer 
  seen so far. The maximum is initially A[0]. Suppose we have solved the problem for A[1,...,i-1], how can we extend it to
  A[1,...,i]? The maximum in the first i elements is either the maximum in the first i-1 elements (which we'll call maxSoFar),
  or it is that a pointer ends in position i (which we'll call maxEndingHere).
  maxEndingHere is either A[i] plus the previous maxEndingHere or just A[i], whichever is larger.
  
  public int maxSubArray(int[] A) {
    int maxSoFar=A[0], maxEndingHere=A[0];
    for (int i=1;i<A.length;++i){
    	maxEndingHere= Math.max(maxEndingHere+A[i],A[i]);
    	maxSoFar=Math.max(maxSoFar, maxEndingHere);	
    }
    return maxSoFar;
}
------------------------------------------------------------------------------------------------------------------------------
Solution 2:
  Apparently, this is a optimization problem, which can be usually solved by DP. 
  So when it comes to DP, the first thing for us to figure out is the format of the sub problem(or the state of each sub problem). 
  The format of the sub problem can be helpful when we are trying to come up with the recursive relation.
  We can set the sub problem like maxSubArray(int A[], int i), which means the maxSubArray for A[0:i ] which must has A[i] as the end element. 
  Now the connect between the sub problem & the original one becomes clearer:
  maxSubArray(A, i) = A[i] + maxSubArray(A, i - 1) > 0 ? maxSubArray(A, i - 1) : 0 
  public int maxSubArray(int[] A) {
        int n = A.length;
        int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];
        dp[0] = A[0];
        int max = dp[0];
        
        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);
            max = Math.max(max, dp[i]);
        }
        
        return max;
}
=============================================================================================================================
