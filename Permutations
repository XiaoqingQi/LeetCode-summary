=====================================================================================================
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
-----------------------------------------------------------------------------------------------------
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0){
            return result;
        }
        helper(nums, result, new ArrayList<Integer>());
        return result;
    }
    private void helper(int[] nums, List<List<Integer>> result, ArrayList<Integer> list){
    //if the size of list equals to the length of nums, then add the list to result and end the recursion
        if (list.size() == nums.length){
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++){
        //if the list doesnot contain nums[i], then add it to the list
            if (!list.contains(nums[i])){
                list.add(nums[i]);
                helper(nums, result, list);
                //backtarcking
                list.remove(list.size() - 1);
            }
        }
    }
}
=====================================================================================================
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
-----------------------------------------------------------------------------------------------------
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0){
            return result;
        }
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        helper(nums, result, new ArrayList<Integer>(), used);
        return result;
    }
    private void helper(int[] nums, List<List<Integer>> result, ArrayList<Integer> list, boolean[] used){
        if (list.size() == nums.length){
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++){
            if (used[i] || (i != 0 && nums[i] == nums[i-1] && !used[i-1])){
                continue;
            }
            used[i] = true;
            list.add(nums[i]);
            helper(nums, result, list, used);
            list.remove(list.size() - 1);
            used[i] = false;
        }
    }
    
}
=====================================================================================================
