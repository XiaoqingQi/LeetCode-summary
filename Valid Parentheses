============================================================================================================
1.Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.

Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true

Example 2:

Input: "()[]{}"
Output: true

Example 3:

Input: "(]"
Output: false

Example 4:

Input: "([)]"
Output: false

Example 5:

Input: "{[]}"
Output: true
-----------------------------------------------------------------------------------------------------------
We use a stack to solve the problem.
Start from the first position to visit every character in the string:
1. If the character is one left parenthesis, we push it to the stack;
2. If the character is one right parenthesis, we check if it matches with the left parenthesis on the top of the stack. 
If not matched or the stack is empty, return false.
If at last, the stack is emtpy, it demenstrates that all right parenthesises match with all left parenthesises, return true.

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if (ch == '(' || ch == '{' || ch == '['){
                stack.push(ch);
            } else if (!stack.isEmpty() && isPairParenthesis(stack.peek(), ch)){
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.isEmpty();
    }
    private boolean isPairParenthesis(char ch1, char ch2){
        return (ch1 == '(' && ch2 == ')') || (ch1 == '{' & ch2 == '}') || (ch1 == '[' && ch2 == ']');
    }
}
============================================================================================================================
2.Generate Parentheses
 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
----------------------------------------------------------------------------------------------------------------------------
Solution 1:
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        backtrack(list, "", 0, 0, n);
        return list;
    }
    
    public void backtrack(List<String> list, String str, int open, int close, int max){
        
        if(str.length() == max*2){
            list.add(str);
            return;
        }
        
        if(open < max)
            backtrack(list, str+"(", open+1, close, max);
        if(close < open)
            backtrack(list, str+")", open, close+1, max);
    }
----------------------------------------------------------------------------------------------------------------------------
Solution 2:
public class GenerateParentheses {
    public List<String> generateParenthesis(int n) {
        // write your code here
        List<String> rs = new ArrayList<>();
        dfs(rs, new StringBuilder(), n, n);
        return rs;
    }
    public void dfs(List<String> rs, StringBuilder sb, int left, int right){
        if (left == 0 && right == 0){
            rs.add(sb.toString());
            return;
        }
        int length = sb.length();
        if (left > 0){
            sb.append('(');
            dfs(rs, sb, left - 1, right);
            sb.setLength(length);
        }
        if (right > left){
            sb.append(')');
            dfs(rs, sb, left, right - 1);
            sb.setLength(length);
        }
    }
    public static void main(String[] args){
        GenerateParentheses gp = new GenerateParentheses();
        gp.generateParenthesis(3);
    }
}
============================================================================================================================
