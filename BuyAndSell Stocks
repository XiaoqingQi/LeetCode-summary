1.Best time to buy and sell stocks

    Say you have an array for which the ith element is the price of a given stock on day i.

    If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

    Note that you cannot sell a stock before you buy one.

    Example 1:

    Input: [7,1,5,3,6,4]
    Output: 5
    Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
                 Not 7-1 = 6, as selling price needs to be larger than buying price.

    Example 2:

    Input: [7,6,4,3,1]
    Output: 0
    Explanation: In this case, no transaction is done, i.e. max profit = 0.
    
    Solution:
    
    The brute force approach would be to try every pair of times(treating the earlier time as the buy time, the later time as the sell time)
    and see which one is higher. This will take O(n2) time.
    If we are going to do better than O(n2), we are probably going to do it in either O(nlgn) or O(n).
    And O(nlgn) comes up with sorting and searching algorithm.
    It's not obvious that we can save time by cutting the array in half here.
    Let's try to loop through the array only once, let's use a greedy approach, where we keep a running maxProfit untill we reach the end of the array.
    We'll start the maxProfit at 0.
    At each iteration, the maxProfit is either the same as the maxProfit at last time step or the max profit we can get by selling stock at current price.
    So for every price, we need keep track of the lowest price we have seen so far. To start, we initialize minPrice at the price of the first day.
    This will take O(n) time, we only loop through the array once.
        class Solution {
            public int maxProfit(int[] prices) {
                //corner case
                if (prices == null || prices.length < 2){
                    return 0;
                }
                //create two variables
                int minPrice = prices[0];
                int maxProfit = 0;
                //loop through the array
                for (int i = 1; i < prices.length; i++){
                    int curPrice = prices[i];
                    maxProfit = Math.max(maxProfit, (curPrice - minPrice));
                    minPrice = Math.min(minPrice, curPrice);
                }
                return maxProfit;
            }
        }
        
    Say you have an array for which the ith element is the price of a given stock on day i.

2.Follow up:

    Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

    Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

    Example 1:

    Input: [7,1,5,3,6,4]
    Output: 7
    Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
                 Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.

    Example 2:

    Input: [1,2,3,4,5]
    Output: 4
    Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
                 Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
                 engaging multiple transactions at the same time. You must sell before buying again.

    Example 3:

    Input: [7,6,4,3,1]
    Output: 0
    Explanation: In this case, no transaction is done, i.e. max profit = 0.
    
    Solution:
    
    Peak Valley Approach:
    The key point is we need to consider every peak immediately following a valley to maximize the profit.
    In case we skip one of the peaks (trying to obtain more profit), we will end up losing the profit over one of the transactions leading to an overall lesser profit.
    class Solution {
        public int maxProfit(int[] prices) {
            int i = 0;
            int valley = prices[0];
            int peak = prices[0];
            int maxprofit = 0;
            while (i < prices.length - 1) {
                while (i < prices.length - 1 && prices[i] >= prices[i + 1])
                    i++;
                valley = prices[i];
                while (i < prices.length - 1 && prices[i] <= prices[i + 1])
                    i++;
                peak = prices[i];
                maxprofit += peak - valley;
            }
            return maxprofit;
        }
    }
    

    Time complexity : O(n)O(n)O(n). Single pass.

    Space complexity : O(1)O(1)O(1). Constant space required.
    
    Another simple solution:
    
    Instead of looking for every peak following a valley, we can directly keep on adding the difference between the consecutive numbers of the array if the second number is larger than the first one, 
    and at the total sum we obtain will be the maximum profit. 
    
    class Solution {
        public int maxProfit(int[] prices) {
            int maxprofit = 0;
            for (int i = 1; i < prices.length; i++) {
                if (prices[i] > prices[i - 1])
                    maxprofit += prices[i] - prices[i - 1];
            }
            return maxprofit;
        }
    }

