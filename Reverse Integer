===============================================================================================================================
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321

Example 2:

Input: -123
Output: -321

Example 3:

Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’2^31,  2^31 âˆ’ 1].
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
-------------------------------------------------------------------------------------------------------------------------------
We can build up the reverse integer one digit at a time. While doing so, we can check beforehand whether or not appending another
digit would cause overflow.
We want to repeatedly pop the last digit off of x, and "push" it to the back of res.
In the end, res will be the reverse of the x.
We can use math to "pop" and "push" digits.
//pop operation
pop = x % 10
x /= 10
//push operation
tem = res * 10 + pop
res = tem
The statement tem = res * 10 + pop, can cause overflow.
It is easy to check beforehand whether or not this statement would cause an overflow.
Let's assume x is positive.
1. If tem = res * 10 + pop causes overflow, then it must be that res >= Integer.MAX_VALUE / 10;
2. If res > Integer.MAX_VALUE / 10, then tem = res * 10 + pop is guaranteed to overflow;
3. If res = Integer.MAX_VALUE / 10, then tem = res * 10 + pop will overflow if and only if pop > 7;
Similar logic can be applied when x is negative.

class Solution {
    public int reverse(int x) {
        int res = 0;
        int pop;
        while (x != 0){
            pop = x % 10;
            x /= 10;
            if (res > Integer.MAX_VALUE / 10 || (res == Integer.MAX_VALUE && pop > 7)){
                return 0;
            }
            if (res < Integer.MIN_VALUE / 10 || (res == Integer.MIN_VALUE && pop < -8)){
                return 0;
            }
            res = res * 10 + pop;
        }
        return res;
    }
}
===============================================================================================================================
